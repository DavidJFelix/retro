defmodule Retro.CardControllerTest do
  use Retro.ConnCase, async: true

  alias Retro.Card

  ### Test fixtures
  @card1 %{
    title: "Test Card 1"
  }
  @card2 %{
    title: "Test Card 2"
  }


  # TODO 1: Uncomment example tests, pass them then write the todo tests
  ### Index controller tests
  describe "index/2" do
    test "returns an array of cards when there are 2+ cards", %{conn: conn} do
      # TODO: uncomment the lines below and then pass this test in the controller
      # cards = [Card.changeset(%Card{}, @card1),
      #          Card.changeset(%Card{}, @card2)]
      #
      # # We need the id which was autogenerated, so we'll capture it on insert.
      # # Repo.insert returns objects with metadata and atoms for keys.
      # # We need no metadata and strings for keys, so we map our conversion
      # # to get our expected Map
      # expected = Enum.map(cards, &Repo.insert!(&1))
      # |> Enum.map(&Map.take(&1, [:id, :title]))
      # |> Enum.map(&Enum.reduce(&1, %{},
      #   fn ({key, val}, acc) ->
      #     Map.put(acc, Atom.to_string(key), val)
      #   end))
      #
      # response = conn
      # |> get(card_path(conn, :index))
      # |> json_response(200)
      #
      # assert response == expected
    end

    test "returns an array with 1 card when there is 1 card" do
      # TODO: based on the test above, make an edge case with 1 card
    end

    test "returns an empty array when there are no cards" do
      # TODO: based on the tests above, make an edge case with no cards
    end
  end


  # TODO 2: Write todo tests, pass them then uncomment example test and pass it
  ### Show controller tests
  describe "show/2" do
    test "returns a card when it exists" do
      # TODO: based on the index test above, write a test for show's happy-path
      # HINT: insert a card like we did in index
      # HINT: card_path is a macro. Try giving it id with card_path(conn, :show, uuid)
    end

    test "returns a server message with 404 error when a card does not exist" do
      # TODO: uncomment this test and pass it. Note the new type returned here
    end

    test "returns a server message with 400 error when a non-uuid id is provided" do
      # TODO: based on the test above, write a test and pass it
      # HINT: the id of a card must be a UUID, so... try making it not one
      # HINT: then make sure your controller handles that similar to 404s
    end
  end


  # TODO 3:
  ### Create controller tests
  describe "create/2" do
    test "returns the card with id when card is valid" do
    end

    test "returns location header when card is valid" do
    end

    test "returns a server message with 422 error when card is invalid" do
    end

    test "does not return a location header when card is invalid" do
    end
  end


  # TODO 4:
  ### Update controller tests
  describe "update/2" do
    test "returns updated card when valid complete card is provided" do
    end

    test "returns updated card when valid partial card is provided" do
    end

    test "returns a server message with 422 when invalid card is provided" do
    end

    test "returns server message with 404 when card is not found" do
    end

    test "returns a server message with 400 when a non-uuid id is provided" do
    end
  end


  # TODO 5:
  ### Delete controller tests
  describe "delete/2" do
    test "returns no content when card did exist" do
    end

    test "delete should return a server message with 404 error when card does not exist" do
    end

    test "delete should return a server message with 400 error when a non-uuid id is provided" do
    end
  end
end
